//Проверка String на то что она пусная.
if commands.isEmpty {
    print(0)
}


//Количество Символов в String

//Swift 3
.characters.count
//Swift 4
.count
//


//Сортировка числового String по убыванию
String(Числовой String).characters.sorted { $0 > $1 }
//


// Нахождение количество символьных повторений в String
var s1 = "aaabbbcc"

var s1c = s1.characters.reduce([:]) { (d, c) -> Dictionary<Character,Int> in
    var d = d
    let i = d[c] ?? 0
    d[c] = i+1
    return d
}
//


//Нахождение Индекса в String
extension String {
    
    func indexes(of character: String) -> [Int] {
        
        precondition(character.count == 1, "Must be single character")
        
        return self.enumerated().reduce([]) { partial, element  in
            if String(element.element) == character {
                return partial + [element.offset]
            }
            return partial
        }
    }
    
}
//


//Make String Lowercase and FirtLeter Capital
var noun = "pARiS"
noun.lowercased().firstUppercased //Paris
//




//Search Characters in range [A-Z] or [0-1] in String 
func matches(for regex: String, in text: String) -> [String] {
    
    do {
        let regex = try NSRegularExpression(pattern: regex)
        let results = regex.matches(in: text,
        range: NSRange(text.startIndex..., in: text))
        return results.map {
            String(text[Range($0.range, in: text)!])
        }
    } catch let error {
        print("invalid regex: \(error.localizedDescription)")
        return []
    }
}

let string = "Z1-1B-63-84-45-E6"
let matched = matches(for: "[F-Z]", in: string)
print(matched)
//Search Characters in range 